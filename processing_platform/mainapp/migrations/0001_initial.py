# Generated by Django 5.2.6 on 2025-09-07 14:58

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Fields',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.CharField(blank=True, max_length=100, null=True)),
                ('short_id', models.CharField(blank=True, max_length=100, null=True)),
                ('long_id', models.CharField(blank=True, max_length=100, null=True)),
                ('crop', models.CharField(blank=True, max_length=100, null=True)),
                ('location_of_field_plot', models.CharField(blank=True, max_length=100, null=True)),
                ('multispectral', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True)),
                ('three_dimensional', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True)),
                ('thermal', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True)),
                ('rgb', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True)),
                ('flying_frequency', models.CharField(blank=True, max_length=100, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('submission_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.CharField(blank=True, max_length=100, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('department', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.CharField(blank=True, max_length=100, null=True)),
                ('project_number', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('data_delivery_method', models.CharField(blank=True, max_length=100, null=True)),
                ('vollebekk_responsible', models.CharField(blank=True, max_length=100, null=True)),
                ('sowing_date', models.CharField(blank=True, max_length=100, null=True)),
                ('measuring_ground_level', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FieldVisualisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Flight_Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('foldername', models.CharField(blank=True, max_length=100, null=True)),
                ('flight_field_id', models.CharField(blank=True, max_length=100, null=True)),
                ('project', models.CharField(blank=True, max_length=100, null=True)),
                ('flight_type', models.CharField(blank=True, choices=[('MS', 'MS'), ('3D', '3D'), ('Thermal', 'Thermal'), ('RGB', 'RGB')], max_length=100, null=True)),
                ('drone_type', models.CharField(blank=True, choices=[('M3M-1', 'M3M-1'), ('M3M-2', 'M3M-2'), ('M4T', 'M4T')], max_length=20, null=True)),
                ('drone_pilot', models.CharField(blank=True, choices=[('Ivar', 'Ivar'), ('Frederic', 'Frederic'), ('Christopher', 'Christopher'), ('Kristoffer', 'Kristoffer'), ('Ludvik', 'Ludvik'), ('Jorgen', 'Jorgen'), ('Mia', 'Mia'), ('Fahad', 'Fahad'), ('Other', 'Other')], max_length=20, null=True)),
                ('reflectance_panel', models.CharField(blank=True, choices=[('New', 'New'), ('Old', 'Old'), ('Carpet', 'Carpet')], max_length=100, null=True)),
                ('flight_start', models.CharField(blank=True, max_length=100, null=True)),
                ('flight_endstart', models.CharField(blank=True, max_length=100, null=True)),
                ('flight_date', models.DateField(blank=True, null=True)),
                ('flight_comments', models.CharField(blank=True, max_length=200, null=True)),
                ('p4d_step1', models.CharField(blank=True, max_length=100, null=True)),
                ('p4d_step1_done_by', models.CharField(blank=True, choices=[('Ivar', 'Ivar'), ('Frederic', 'Frederic'), ('Christopher', 'Christopher'), ('Kristoffer', 'Kristoffer'), ('Ludvik', 'Ludvik'), ('Jorgen', 'Jorgen'), ('Mia', 'Mia'), ('Fahad', 'Fahad'), ('Other', 'Other')], max_length=20, null=True)),
                ('p4d_step1_workable_data', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True)),
                ('p4d_processing', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True)),
                ('p4d_processing_done_by', models.CharField(blank=True, choices=[('Ivar', 'Ivar'), ('Frederic', 'Frederic'), ('Christopher', 'Christopher'), ('Kristoffer', 'Kristoffer'), ('Ludvik', 'Ludvik'), ('Jorgen', 'Jorgen'), ('Mia', 'Mia'), ('Fahad', 'Fahad'), ('Other', 'Other')], max_length=20, null=True)),
                ('p4d_processing_pc', models.CharField(blank=True, max_length=100, null=True)),
                ('p4d_processing_comments', models.CharField(blank=True, max_length=200, null=True)),
                ('flight_height', models.CharField(blank=True, max_length=100, null=True)),
                ('flight_side_over', models.CharField(blank=True, max_length=100, null=True)),
                ('flight_front_over', models.CharField(blank=True, max_length=100, null=True)),
                ('flight_wind_speed', models.CharField(blank=True, max_length=100, null=True)),
                ('flight_drone_type', models.CharField(blank=True, max_length=100, null=True)),
                ('new_folder_name', models.CharField(blank=True, max_length=200, null=True)),
                ('root_folder', models.CharField(blank=True, max_length=200, null=True)),
                ('flight_path', models.CharField(blank=True, max_length=200, null=True)),
                ('p4d_path', models.CharField(blank=True, max_length=200, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Flight_Paths',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('record_number', models.IntegerField(db_column='#')),
                ('project', models.CharField(max_length=100)),
                ('short_id', models.CharField(max_length=50)),
                ('project_folder_name', models.CharField(max_length=255)),
                ('field_folder_name', models.CharField(max_length=255)),
                ('flight_path_name', models.CharField(max_length=255)),
                ('location_of_field_plot', models.CharField(max_length=255)),
                ('type_of_flight', models.CharField(max_length=100)),
                ('frequency', models.FloatField(blank=True, null=True)),
                ('drone_model', models.CharField(choices=[('M3M-1', 'M3M-1'), ('M3M-2', 'M3M-2'), ('M4T', 'M4T')], help_text='One of M3M-1, M3M-2 or M4T', max_length=100)),
                ('flight_height', models.FloatField(blank=True, null=True)),
                ('flight_speed', models.FloatField(blank=True, null=True)),
                ('side_overlap', models.FloatField(blank=True, null=True)),
                ('front_overlap', models.FloatField(blank=True, null=True)),
                ('camera_angle', models.FloatField(blank=True, null=True)),
                ('flight_pattern', models.CharField(blank=True, max_length=100, null=True)),
                ('flight_path_angle', models.FloatField(blank=True, null=True)),
                ('ortho_gsd', models.FloatField(blank=True, db_column='Ortho GSD', null=True)),
                ('oblique_gsd', models.FloatField(blank=True, db_column='Oblique GSD', null=True)),
                ('flight_length', models.FloatField(blank=True, null=True)),
                ('ortho_gsd_pix4d', models.FloatField(blank=True, db_column='Ortho GSD Pix4D', null=True)),
                ('oblique_gsd_pix4d', models.FloatField(blank=True, db_column='Oblique GSD Pix4D', null=True)),
                ('first_flight_path', models.CharField(db_column='1_flight path', max_length=255)),
                ('pix4d_path', models.CharField(db_column='2_1_pix4d path', max_length=255)),
            ],
            options={
                'db_table': 'flight_paths',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor_id', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Spectrum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='spectrums', to='mainapp.fieldvisualisation')),
            ],
            options={
                'unique_together': {('field', 'name')},
            },
        ),
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('soil_temperature', models.FloatField(blank=True, null=True)),
                ('soil_moisture', models.FloatField(blank=True, null=True)),
                ('air_temperature', models.FloatField(blank=True, null=True)),
                ('air_humidity', models.FloatField(blank=True, null=True)),
                ('battery', models.FloatField(blank=True, null=True)),
                ('rainfall', models.FloatField(blank=True, null=True)),
                ('crop_type', models.CharField(blank=True, max_length=100)),
                ('soil_type', models.CharField(blank=True, max_length=100)),
                ('sensor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainapp.sensor')),
            ],
            options={
                'unique_together': {('sensor', 'timestamp')},
            },
        ),
        migrations.CreateModel(
            name='ZonalStat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idx', models.IntegerField()),
                ('location', models.CharField(max_length=100)),
                ('camera', models.CharField(max_length=100)),
                ('flight_height', models.CharField(max_length=20)),
                ('project', models.CharField(max_length=100)),
                ('flight', models.CharField(max_length=200)),
                ('date', models.DateField()),
                ('count', models.IntegerField()),
                ('cv', models.FloatField()),
                ('iqr', models.FloatField()),
                ('kurtosis', models.FloatField()),
                ('majority', models.FloatField()),
                ('maximum', models.FloatField()),
                ('mean', models.FloatField()),
                ('median', models.FloatField()),
                ('minimum', models.FloatField()),
                ('minority', models.FloatField()),
                ('q25', models.FloatField()),
                ('q75', models.FloatField()),
                ('range_stat', models.FloatField()),
                ('skewness', models.FloatField()),
                ('std', models.FloatField()),
                ('sum_stat', models.FloatField()),
                ('top_5_mean', models.FloatField()),
                ('top_5_median', models.FloatField()),
                ('top_5_std', models.FloatField()),
                ('top_10', models.FloatField()),
                ('top_10_mean', models.FloatField()),
                ('top_10_median', models.FloatField()),
                ('top_10_std', models.FloatField()),
                ('top_15', models.FloatField()),
                ('top_15_mean', models.FloatField()),
                ('top_15_median', models.FloatField()),
                ('top_15_std', models.FloatField()),
                ('top_20', models.FloatField()),
                ('top_25', models.FloatField()),
                ('top_25_mean', models.FloatField()),
                ('top_25_median', models.FloatField()),
                ('top_25_std', models.FloatField()),
                ('top_35', models.FloatField()),
                ('top_35_mean', models.FloatField()),
                ('top_35_median', models.FloatField()),
                ('top_35_std', models.FloatField()),
                ('top_50', models.FloatField()),
                ('top_50_mean', models.FloatField()),
                ('top_50_median', models.FloatField()),
                ('top_50_std', models.FloatField()),
                ('variance', models.FloatField()),
                ('variety', models.IntegerField()),
                ('spectrum', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to='mainapp.spectrum')),
            ],
            options={
                'ordering': ['date'],
                'constraints': [models.UniqueConstraint(fields=('date', 'idx', 'spectrum'), name='uniq_date_idx_spectrum')],
            },
        ),
    ]
